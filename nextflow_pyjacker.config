params{
  samplesheet = "${baseDir}/samplesheet_pyjacker.csv"
  outDir = "${baseDir}/results"
  // Please use the same reference as the one used for the alignment. This information can be found in the header of the bam file.
  reference_fa="/omics/odcf/reference_data/legacy/ngs_share/assemblies/hg19_GRCh37_1000genomes/sequence/1KGRef_Phix/hs37d5_PhiX.fa"
  reference_version = "hg19" // hg19 or hg38
  chr_prefix = false
  
  RNA_TPM_file = "/path/to/tpm.tsv" // rows are genes and columns are samples. Must also have one column gene_id. If a column gene_name is present, it will be ignored.

  use_control= true
  run_manta_freec = true
  run_ASE = true
  run_pyjacker = true
  
  // If run_manta_freec is false, breakpoints and CNAs have to be provided
  //breakpoints= "path/to/breakpoints.tsv"
  //CNAs = "/path/to/CNAs.tsv"
  
  // If run_ASE is false, ase_dir needs to be provided
  //ase_dir = "path/to/ASE/RNA"
  //ase_dna_dir = "path/to/ASE/DNA"
  
  //fusions = "path/to/fusions.tsv"
  //enhancers = "path/to/enhancers.tsv"
  
  n_iterations_FDR= 10
  
  
  
  

  SV_minPR = 4
  SV_minSR = 4
  SV_minLen_nocontrol = 40000
  SV_minLen_control = 500
  
  manta_filterSmallInsertions_nocontrol = true
  pure_tumor = false
  
  
  
  amber = "${baseDir}/bin/amber-3.9.jar"
  cobalt = "${baseDir}/bin/cobalt_v1.14.jar"
  gridss = "${baseDir}/bin/gridss"
  gridss_jar = "${baseDir}/bin/gridss-2.13.2-gridss-jar-with-dependencies.jar"
  gripss = "${baseDir}/bin/gripss_v2.3.4.jar"
  purple = "${baseDir}/bin/purple_v3.8.2.jar"
  picard = "${baseDir}/bin/picard.jar"

  data_dir = "${baseDir}/data"
  hg19_drive_id= "1XOoG2QhTgj33i2rlRbee5VxVQgPkkgh5"
  hg38_drive_id= "1ulH2VNaRhrt-VyPP00RYSqQmrlihSLo2"
  mutect2_drive_id="1uESCYSW3_LaM7W7aoKICrkFVFodNsNzn"
}

singularity {
  enabled = true
  cacheDir = "${baseDir}/singularity"
  tmpDir = "${baseDir}/tmp"
  autoMounts = true
  envWhitelist=['SINGULARITY_TMPDIR','APPTAINER_TMPDIR', 'http_proxy', 'https_proxy', 'ftp_proxy' ]
  runOptions = '--bind ${TMPDIR}:${TMPDIR}'
}

executor{
  perJobMemLimit=true
}

process {
  executor = 'lsf'
  submitRateLimit = '5 sec'
  errorStrategy = 'retry'
  maxRetries = 0
  memory = 12.GB
  time = 6.h

}

process {
  withLabel:hmf {
    container = "docker://esollier/hmf:latest"
  }
  withLabel:gatk {
    container = "docker://esollier/gatk:latest"
  }
  withLabel:manta {
    container = "docker://esollier/manta:latest"
  }
  withLabel:freec {
    container = "docker://esollier/freec:latest"
  }
  withLabel:utils {
    container = "docker://esollier/utils:latest"
  }
  withLabel:figeno {
    container = "docker://esollier/figeno:latest"
  }
  withLabel:fast_ase {
    container = "docker://esollier/fast_ase:latest"
  }
  withLabel:pyjacker {
    container = "docker://esollier/pyjacker:latest"
  }
}
